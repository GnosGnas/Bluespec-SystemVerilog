//
// Generated by Bluespec Compiler, version 2023.01-43-g0b385553 (build 0b385553)
//
// On Wed Nov  1 17:00:58 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register cntr
  reg [31 : 0] cntr;
  wire [31 : 0] cntr$D_IN;
  wire cntr$EN;

  // ports of submodule dut
  wire [15 : 0] dut$a, dut$b, dut$clear_value, dut$out;
  wire dut$EN, dut$clear;

  // rule scheduling signals
  wire WILL_FIRE_RL_r1;

  // submodule dut
  mymac dut(.clk(CLK),
	    .rst_b(RST_N),
	    .a(dut$a),
	    .b(dut$b),
	    .clear_value(dut$clear_value),
	    .EN(dut$EN),
	    .clear(dut$clear),
	    .out(dut$out));

  // rule RL_r1
  assign WILL_FIRE_RL_r1 = (cntr ^ 32'h80000000) < 32'h80000003 ;

  // register cntr
  assign cntr$D_IN = cntr + 32'd1 ;
  assign cntr$EN = WILL_FIRE_RL_r1 ;

  // submodule dut
  assign dut$a = 16'd2 ;
  assign dut$b = 16'd3 ;
  assign dut$clear_value = 16'd0 ;
  assign dut$EN = WILL_FIRE_RL_r1 && cntr != 32'd0 ;
  assign dut$clear = WILL_FIRE_RL_r1 && cntr == 32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (cntr$EN) cntr <= `BSV_ASSIGNMENT_DELAY cntr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cntr = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_r1 && cntr != 32'd0) $display("Sending 3");
    if (RST_N != `BSV_RESET_VALUE)
      if (cntr == 32'd3) $display("Result is %d\n", $signed(dut$out));
    if (RST_N != `BSV_RESET_VALUE) if (cntr == 32'd3) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkTb

